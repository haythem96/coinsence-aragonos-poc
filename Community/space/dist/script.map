{"version":3,"sources":["../node_modules/@babel/runtime/helpers/interopRequireWildcard.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/uuid/lib/rng-browser.js","../node_modules/uuid/lib/bytesToUuid.js","../node_modules/uuid/v4.js","../node_modules/@aragon/messenger/dist/jsonrpc.js","../node_modules/@aragon/messenger/dist/providers/Provider.js","../../src/util/root.ts","../../src/util/isFunction.ts","../../src/util/isArray.ts","../../src/util/isObject.ts","../../src/util/errorObject.ts","../../src/util/tryCatch.ts","../../src/util/UnsubscriptionError.ts","../src/Subscription.ts","../src/Observer.ts","../../src/symbol/rxSubscriber.ts","../src/Subscriber.ts","../../src/util/toSubscriber.ts","../../src/symbol/observable.ts","../../src/util/noop.ts","../../src/util/pipe.ts","../src/Observable.ts","../../src/util/ObjectUnsubscribedError.ts","../src/SubjectSubscription.ts","../src/Subject.ts","../src/AsyncSubject.ts","../../src/observable/BoundCallbackObservable.ts","../../src/observable/bindCallback.ts","../../../src/add/observable/bindCallback.ts","../../src/observable/BoundNodeCallbackObservable.ts","../../src/observable/bindNodeCallback.ts","../../../src/add/observable/bindNodeCallback.ts","../../src/util/isScheduler.ts","../../src/observable/ScalarObservable.ts","../../src/observable/EmptyObservable.ts","../../src/observable/ArrayObservable.ts","../src/OuterSubscriber.ts","../../src/util/isArrayLike.ts","../../src/util/isPromise.ts","../../src/symbol/iterator.ts","../src/InnerSubscriber.ts","../../src/util/subscribeToResult.ts","../../src/operators/combineLatest.ts","../../src/observable/combineLatest.ts","../../../src/add/observable/combineLatest.ts","../../src/observable/of.ts","../../src/observable/PromiseObservable.ts","../../src/observable/IteratorObservable.ts","../../src/observable/ArrayLikeObservable.ts","../src/Notification.ts","../../src/operators/observeOn.ts","../../src/observable/FromObservable.ts","../../src/observable/from.ts","../../src/operators/mergeMap.ts","../../src/util/identity.ts","../../src/operators/mergeAll.ts","../../src/operators/concatAll.ts","../../src/observable/concat.ts","../../../src/add/observable/concat.ts","../../src/observable/DeferObservable.ts","../../src/observable/defer.ts","../../../src/add/observable/defer.ts","../../src/observable/empty.ts","../../../src/add/observable/empty.ts","../../src/observable/ForkJoinObservable.ts","../../src/observable/forkJoin.ts","../../../src/add/observable/forkJoin.ts","../../../src/add/observable/from.ts","../../src/observable/FromEventObservable.ts","../../src/observable/fromEvent.ts","../../../src/add/observable/fromEvent.ts","../../src/observable/FromEventPatternObservable.ts","../../src/observable/fromEventPattern.ts","../../../src/add/observable/fromEventPattern.ts","../../src/observable/fromPromise.ts","../../../src/add/observable/fromPromise.ts","../../src/observable/GenerateObservable.ts","../../src/observable/generate.ts","../../../src/add/observable/generate.ts","../../src/observable/IfObservable.ts","../../src/observable/if.ts","../../../src/add/observable/if.ts","../../src/util/isNumeric.ts","../../src/scheduler/Action.ts","../../src/scheduler/AsyncAction.ts","../src/Scheduler.ts","../../src/scheduler/AsyncScheduler.ts","../../src/scheduler/async.ts","../../src/observable/IntervalObservable.ts","../../src/observable/interval.ts","../../../src/add/observable/interval.ts","../../src/observable/merge.ts","../../../src/add/observable/merge.ts","../../src/observable/race.ts","../../../src/add/observable/race.ts","../../src/observable/NeverObservable.ts","../../src/observable/never.ts","../../../src/add/observable/never.ts","../../../src/add/observable/of.ts","../../src/operators/onErrorResumeNext.ts","../../src/observable/onErrorResumeNext.ts","../../../src/add/observable/onErrorResumeNext.ts","../../src/observable/PairsObservable.ts","../../src/observable/pairs.ts","../../../src/add/observable/pairs.ts","../../src/observable/RangeObservable.ts","../../src/observable/range.ts","../../../src/add/observable/range.ts","../../src/observable/UsingObservable.ts","../../src/observable/using.ts","../../../src/add/observable/using.ts","../../src/observable/ErrorObservable.ts","../../src/observable/throw.ts","../../../src/add/observable/throw.ts","../../src/util/isDate.ts","../../src/observable/TimerObservable.ts","../../src/observable/timer.ts","../../../src/add/observable/timer.ts","../../src/operators/zip.ts","../../src/observable/zip.ts","../../../src/add/observable/zip.ts","../../src/operators/map.ts","../../../src/observable/dom/AjaxObservable.ts","../../../src/observable/dom/ajax.ts","../../../../src/add/observable/dom/ajax.ts","../../src/scheduler/QueueAction.ts","../../src/scheduler/QueueScheduler.ts","../../src/scheduler/queue.ts","../src/ReplaySubject.ts","../../src/util/assign.ts","../../../src/observable/dom/WebSocketSubject.ts","../../../src/observable/dom/webSocket.ts","../../../../src/add/observable/dom/webSocket.ts","../../src/operators/buffer.ts","../../src/operator/buffer.ts","../../../src/add/operator/buffer.ts","../../src/operators/bufferCount.ts","../../src/operator/bufferCount.ts","../../../src/add/operator/bufferCount.ts","../../src/operators/bufferTime.ts","../../src/operator/bufferTime.ts","../../../src/add/operator/bufferTime.ts","../../src/operators/bufferToggle.ts","../../src/operator/bufferToggle.ts","../../../src/add/operator/bufferToggle.ts","../../src/operators/bufferWhen.ts","../../src/operator/bufferWhen.ts","../../../src/add/operator/bufferWhen.ts","../../src/operators/catchError.ts","../../src/operator/catch.ts","../../../src/add/operator/catch.ts","../../src/operators/combineAll.ts","../../src/operator/combineAll.ts","../../../src/add/operator/combineAll.ts","../../src/operator/combineLatest.ts","../../../src/add/operator/combineLatest.ts","../../src/operators/concat.ts","../../src/operator/concat.ts","../../../src/add/operator/concat.ts","../../src/operator/concatAll.ts","../../../src/add/operator/concatAll.ts","../../src/operators/concatMap.ts","../../src/operator/concatMap.ts","../../../src/add/operator/concatMap.ts","../../src/operators/concatMapTo.ts","../../src/operator/concatMapTo.ts","../../../src/add/operator/concatMapTo.ts","../../src/operators/count.ts","../../src/operator/count.ts","../../../src/add/operator/count.ts","../../src/operators/dematerialize.ts","../../src/operator/dematerialize.ts","../../../src/add/operator/dematerialize.ts","../../src/operators/debounce.ts","../../src/operator/debounce.ts","../../../src/add/operator/debounce.ts","../../src/operators/debounceTime.ts","../../src/operator/debounceTime.ts","../../../src/add/operator/debounceTime.ts","../../src/operators/defaultIfEmpty.ts","../../src/operator/defaultIfEmpty.ts","../../../src/add/operator/defaultIfEmpty.ts","../../src/operators/delay.ts","../../src/operator/delay.ts","../../../src/add/operator/delay.ts","../../src/operators/delayWhen.ts","../../src/operator/delayWhen.ts","../../../src/add/operator/delayWhen.ts","../../src/util/Set.ts","../../src/operators/distinct.ts","../../src/operator/distinct.ts","../../../src/add/operator/distinct.ts","../../src/operators/distinctUntilChanged.ts","../../src/operator/distinctUntilChanged.ts","../../../src/add/operator/distinctUntilChanged.ts","../../src/operators/distinctUntilKeyChanged.ts","../../src/operator/distinctUntilKeyChanged.ts","../../../src/add/operator/distinctUntilKeyChanged.ts","../../src/operators/tap.ts","../../src/operator/do.ts","../../../src/add/operator/do.ts","../../src/operators/exhaust.ts","../../src/operator/exhaust.ts","../../../src/add/operator/exhaust.ts","../../src/operators/exhaustMap.ts","../../src/operator/exhaustMap.ts","../../../src/add/operator/exhaustMap.ts","../../src/operators/expand.ts","../../src/operator/expand.ts","../../../src/add/operator/expand.ts","../../src/util/ArgumentOutOfRangeError.ts","../../src/operators/elementAt.ts","../../src/operator/elementAt.ts","../../../src/add/operator/elementAt.ts","../../src/operators/filter.ts","../../src/operator/filter.ts","../../../src/add/operator/filter.ts","../../src/operators/finalize.ts","../../src/operator/finally.ts","../../../src/add/operator/finally.ts","../../src/operators/find.ts","../../src/operator/find.ts","../../../src/add/operator/find.ts","../../src/operators/findIndex.ts","../../src/operator/findIndex.ts","../../../src/add/operator/findIndex.ts","../../src/util/EmptyError.ts","../../src/operators/first.ts","../../src/operator/first.ts","../../../src/add/operator/first.ts","../../src/util/MapPolyfill.ts","../../src/util/Map.ts","../../src/util/FastMap.ts","../../src/operators/groupBy.ts","../../src/operator/groupBy.ts","../../../src/add/operator/groupBy.ts","../../src/operators/ignoreElements.ts","../../src/operator/ignoreElements.ts","../../../src/add/operator/ignoreElements.ts","../../src/operators/isEmpty.ts","../../src/operator/isEmpty.ts","../../../src/add/operator/isEmpty.ts","../../src/operators/audit.ts","../../src/operator/audit.ts","../../../src/add/operator/audit.ts","../../src/operators/auditTime.ts","../../src/operator/auditTime.ts","../../../src/add/operator/auditTime.ts","../../src/operators/last.ts","../../src/operator/last.ts","../../../src/add/operator/last.ts","../../src/operator/let.ts","../../../src/add/operator/let.ts","../../src/operators/every.ts","../../src/operator/every.ts","../../../src/add/operator/every.ts","../../src/operator/map.ts","../../../src/add/operator/map.ts","../../src/operators/mapTo.ts","../../src/operator/mapTo.ts","../../../src/add/operator/mapTo.ts","../../src/operators/materialize.ts","../../src/operator/materialize.ts","../../../src/add/operator/materialize.ts","../../src/operators/scan.ts","../../src/operators/takeLast.ts","../../src/operators/reduce.ts","../../src/operators/max.ts","../../src/operator/max.ts","../../../src/add/operator/max.ts","../../src/operators/merge.ts","../../src/operator/merge.ts","../../../src/add/operator/merge.ts","../../src/operator/mergeAll.ts","../../../src/add/operator/mergeAll.ts","../../src/operator/mergeMap.ts","../../../src/add/operator/mergeMap.ts","../../src/operators/mergeMapTo.ts","../../src/operator/mergeMapTo.ts","../../../src/add/operator/mergeMapTo.ts","../../src/operators/mergeScan.ts","../../src/operator/mergeScan.ts","../../../src/add/operator/mergeScan.ts","../../src/operators/min.ts","../../src/operator/min.ts","../../../src/add/operator/min.ts","../../src/operators/refCount.ts","../../src/observable/ConnectableObservable.ts","../../src/operators/multicast.ts","../../src/operator/multicast.ts","../../../src/add/operator/multicast.ts","../../src/operator/observeOn.ts","../../../src/add/operator/observeOn.ts","../../src/operator/onErrorResumeNext.ts","../../../src/add/operator/onErrorResumeNext.ts","../../src/operators/pairwise.ts","../../src/operator/pairwise.ts","../../../src/add/operator/pairwise.ts","../../src/util/not.ts","../../src/operators/partition.ts","../../src/operator/partition.ts","../../../src/add/operator/partition.ts","../../src/operators/pluck.ts","../../src/operator/pluck.ts","../../../src/add/operator/pluck.ts","../../src/operators/publish.ts","../../src/operator/publish.ts","../../../src/add/operator/publish.ts","../src/BehaviorSubject.ts","../../src/operators/publishBehavior.ts","../../src/operator/publishBehavior.ts","../../../src/add/operator/publishBehavior.ts","../../src/operators/publishReplay.ts","../../src/operator/publishReplay.ts","../../../src/add/operator/publishReplay.ts","../../src/operators/publishLast.ts","../../src/operator/publishLast.ts","../../../src/add/operator/publishLast.ts","../../src/operators/race.ts","../../src/operator/race.ts","../../../src/add/operator/race.ts","../../src/operator/reduce.ts","../../../src/add/operator/reduce.ts","../../src/operators/repeat.ts","../../src/operator/repeat.ts","../../../src/add/operator/repeat.ts","../../src/operators/repeatWhen.ts","../../src/operator/repeatWhen.ts","../../../src/add/operator/repeatWhen.ts","../../src/operators/retry.ts","../../src/operator/retry.ts","../../../src/add/operator/retry.ts","../../src/operators/retryWhen.ts","../../src/operator/retryWhen.ts","../../../src/add/operator/retryWhen.ts","../../src/operators/sample.ts","../../src/operator/sample.ts","../../../src/add/operator/sample.ts","../../src/operators/sampleTime.ts","../../src/operator/sampleTime.ts","../../../src/add/operator/sampleTime.ts","../../src/operator/scan.ts","../../../src/add/operator/scan.ts","../../src/operators/sequenceEqual.ts","../../src/operator/sequenceEqual.ts","../../../src/add/operator/sequenceEqual.ts","../../src/operators/share.ts","../../src/operator/share.ts","../../../src/add/operator/share.ts","../../src/operators/shareReplay.ts","../../src/operator/shareReplay.ts","../../../src/add/operator/shareReplay.ts","../../src/operators/single.ts","../../src/operator/single.ts","../../../src/add/operator/single.ts","../../src/operators/skip.ts","../../src/operator/skip.ts","../../../src/add/operator/skip.ts","../../src/operators/skipLast.ts","../../src/operator/skipLast.ts","../../../src/add/operator/skipLast.ts","../../src/operators/skipUntil.ts","../../src/operator/skipUntil.ts","../../../src/add/operator/skipUntil.ts","../../src/operators/skipWhile.ts","../../src/operator/skipWhile.ts","../../../src/add/operator/skipWhile.ts","../../src/operators/startWith.ts","../../src/operator/startWith.ts","../../../src/add/operator/startWith.ts","../../src/util/Immediate.ts","../../src/scheduler/AsapAction.ts","../../src/scheduler/AsapScheduler.ts","../../src/scheduler/asap.ts","../../src/observable/SubscribeOnObservable.ts","../../src/operators/subscribeOn.ts","../../src/operator/subscribeOn.ts","../../../src/add/operator/subscribeOn.ts","../../src/operators/switchMap.ts","../../src/operators/switchAll.ts","../../src/operator/switch.ts","../../../src/add/operator/switch.ts","../../src/operator/switchMap.ts","../../../src/add/operator/switchMap.ts","../../src/operators/switchMapTo.ts","../../src/operator/switchMapTo.ts","../../../src/add/operator/switchMapTo.ts","../../src/operators/take.ts","../../src/operator/take.ts","../../../src/add/operator/take.ts","../../src/operator/takeLast.ts","../../../src/add/operator/takeLast.ts","../../src/operators/takeUntil.ts","../../src/operator/takeUntil.ts","../../../src/add/operator/takeUntil.ts","../../src/operators/takeWhile.ts","../../src/operator/takeWhile.ts","../../../src/add/operator/takeWhile.ts","../../src/operators/throttle.ts","../../src/operator/throttle.ts","../../../src/add/operator/throttle.ts","../../src/operators/throttleTime.ts","../../src/operator/throttleTime.ts","../../../src/add/operator/throttleTime.ts","../../src/operators/timeInterval.ts","../../src/operator/timeInterval.ts","../../../src/add/operator/timeInterval.ts","../../src/util/TimeoutError.ts","../../src/operators/timeout.ts","../../src/operator/timeout.ts","../../../src/add/operator/timeout.ts","../../src/operators/timeoutWith.ts","../../src/operator/timeoutWith.ts","../../../src/add/operator/timeoutWith.ts","../../src/operators/timestamp.ts","../../src/operator/timestamp.ts","../../../src/add/operator/timestamp.ts","../../src/operators/toArray.ts","../../src/operator/toArray.ts","../../../src/add/operator/toArray.ts","../../src/operators/window.ts","../../src/operator/window.ts","../../../src/add/operator/window.ts","../../src/operators/windowCount.ts","../../src/operator/windowCount.ts","../../../src/add/operator/windowCount.ts","../../src/operators/windowTime.ts","../../src/operator/windowTime.ts","../../../src/add/operator/windowTime.ts","../../src/operators/windowToggle.ts","../../src/operator/windowToggle.ts","../../../src/add/operator/windowToggle.ts","../../src/operators/windowWhen.ts","../../src/operator/windowWhen.ts","../../../src/add/operator/windowWhen.ts","../../src/operators/withLatestFrom.ts","../../src/operator/withLatestFrom.ts","../../../src/add/operator/withLatestFrom.ts","../../src/operator/zip.ts","../../../src/add/operator/zip.ts","../../src/operators/zipAll.ts","../../src/operator/zipAll.ts","../../../src/add/operator/zipAll.ts","../../src/testing/SubscriptionLog.ts","../../src/testing/SubscriptionLoggable.ts","../../src/util/applyMixins.ts","../../src/testing/ColdObservable.ts","../../src/testing/HotObservable.ts","../../src/scheduler/VirtualTimeScheduler.ts","../../src/testing/TestScheduler.ts","../../src/util/AnimationFrame.ts","../../src/scheduler/AnimationFrameAction.ts","../../src/scheduler/AnimationFrameScheduler.ts","../../src/scheduler/animationFrame.ts","../src/operators.ts","../src/Rx.ts","../node_modules/@aragon/messenger/dist/providers/MessagePortMessage.js","../node_modules/@aragon/messenger/dist/providers/WindowMessage.js","../node_modules/@aragon/messenger/dist/providers/DevMessage.js","../node_modules/@aragon/messenger/dist/index.js","../src/index.js","script.js"],"names":["AppProxyHandler","get","target","name","params","rpc","sendAndObserveResponse","pluck","AppProxy","constructor","provider","Messenger","accounts","sendAndObserveResponses","network","identify","identifier","send","events","external","address","jsonInterface","contract","fromBlock","filter","item","type","constant","forEach","methodJsonInterface","cache","key","value","state","store","reducer","initialState","first","wrappedReducer","event","Promise","resolve","store$","switchMap","mergeScan","map","publishReplay","connect","call","method","notify","title","body","context","date","Date","requests","request","describeScript","script","web3Eth","AragonApp","providers","MessagePortMessage","Proxy","app","Aragon","dummyValue"],"mappings":"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","file":"script.map","sourceRoot":"../app","sourcesContent":["function _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nmodule.exports = _interopRequireWildcard;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _v=_interopRequireDefault(require(\"uuid/v4\"));Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=exports.isValidResponse=exports.encodeResponse=exports.encodeRequest=void 0;const encodeRequest=(method,params=[])=>({jsonrpc:\"2.0\",id:(0,_v.default)(),method,params});exports.encodeRequest=encodeRequest;const encodeResponse=(id,result=null)=>{let response={jsonrpc:\"2.0\",id};return result instanceof Error?response.error=result.message||\"An error occurred\":response.result=result,response};exports.encodeResponse=encodeResponse;const isValidResponse=response=>!!response&&\"2.0\"===response.jsonrpc&&\"string\"==typeof response.id&&(void 0!==response.result||void 0!==response.error);exports.isValidResponse=isValidResponse;var _default={encodeRequest,encodeResponse,isValidResponse};exports.default=_default;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;/**\n * A provider passes messages between different contexts.\n *\n * @class Provider\n */class Provider{/**\n   * An observable of messages being sent to this provider.\n   *\n   * @memberof Provider\n   * @instance\n   */messages(){throw new Error(\"Not implemented\")}/**\n   * Send a message to a target.\n   *\n   * @param {Object} payload The payload to send\n   * @memberof Provider\n   * @instance\n   */send(){throw new Error(\"Not implemented\")}}exports.default=Provider;","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): To resolve an issue where Node users may have multiple\n          // copies of rxjs in their node_modules directory.\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated internal use only */ _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  /** @deprecated internal use only */ public source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments it will return an Observable. If function `func`\n   * calls its callback with one argument the Observable will emit that value.\n   * If on the other hand the callback is called with multiple values the resulting\n   * Observable will emit an array with said values as arguments.\n   *\n   * It is very important to remember that input function `func` is not called\n   * when the output function is, but rather when the Observable returned by the output\n   * function is subscribed. This means if `func` makes an AJAX request, that request\n   * will be made every time someone subscribes to the resulting Observable, but not before.\n   *\n   * Optionally, a selector function can be passed to `bindObservable`. The selector function\n   * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n   * Even though by default multiple arguments passed to callback appear in the stream as an array\n   * the selector function will be called with arguments directly, just as the callback would.\n   * This means you can imagine the default selector (when one is not provided explicitly)\n   * as a function that aggregates all its arguments into an array, or simply returns first argument\n   * if there is only one.\n   *\n   * The last optional parameter - {@link Scheduler} - can be used to control when the call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n   * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n   * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n   * and call `subscribe` on the output Observable all function calls that are currently executing\n   * will end before `func` is invoked.\n   *\n   * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n   * In particular, if the callback is called synchronously the subscription of the resulting Observable\n   * will call the `next` function synchronously as well.  If you want to defer that call,\n   * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n   * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that the Observable created by the output function will always emit a single value\n   * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n   * calls will not appear in the stream. If you need to listen for multiple calls,\n   *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n   * will be the context that the output function has at call time. In particular, if `func`\n   * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n   * it is recommended that the context of the output function is set to that object as well.\n   *\n   * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions the same as any other and error parameters\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive an array of arguments passed to a callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with a selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on an object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func A function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps them to a value that is emitted on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}\n","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: NodeEventHandler) => void;\n  removeListener: (eventName: string, handler: NodeEventHandler) => void;\n};\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler, <boolean>options);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler as NodeEventHandler);\n      unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}\n","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\n\nObservable.generate = staticGenerate;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof staticGenerate;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n  protected work: (this: this, state?: T) => void;\n\n  constructor(protected scheduler: AsyncScheduler,\n              work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n    this.work = work;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\n\nObservable.race = staticRace;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof staticRace;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof staticOnErrorResumeNext;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}\r\n","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import {  zipStatic  } from '../operators/zip';\n\nexport const zip = zipStatic;\n","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { map } from '../../operators/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nconst mapResponse = map((x: AjaxResponse, index: number) => x.response);\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return mapResponse(\n    new AjaxObservable<AjaxResponse>({\n      method: 'GET',\n      url,\n      responseType: 'json',\n      headers\n    })\n  );\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType as any;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\nfunction parseXhrResponse(responseType: string, xhr: XMLHttpRequest) {\n  switch (responseType) {\n    case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          // HACK(benlesh): TypeScript shennanigans\n          // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n          return JSON.parse((xhr as any).responseText || 'null');\n        }\n      case 'xml':\n        return xhr.responseXML;\n      case 'text':\n      default:\n          // HACK(benlesh): TypeScript shennanigans\n          // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n          return  ('response' in xhr) ? xhr.response : (xhr as any).responseText;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { buffer as higherOrder } from '../operators/buffer';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return higherOrder(closingNotifier)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferCount as higherOrder } from '../operators/bufferCount';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return higherOrder(bufferSize, startBufferEvery)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { bufferTime as higherOrder } from '../operators/bufferTime';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return higherOrder(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { bufferToggle as higherOrder } from '../operators/bufferToggle';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return higherOrder(openings, closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferWhen as higherOrder } from '../operators/bufferWhen';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return higherOrder(closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { catchError as higherOrder } from '../operators/catchError';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  return higherOrder(selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../Observable';\nimport { combineAll as higherOrder } from '../operators/combineAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { combineLatest as higherOrder } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { concat as higherOrder } from '../operators/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { concatAll as higherOrder } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return higherOrderConcatMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMapTo as higherOrder } from '../operators/concatMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { count as higherOrder } from '../operators/count';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { dematerialize as higherOrder } from '../operators/dematerialize';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<Notification<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { debounce as higherOrder } from '../operators/debounce';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { debounceTime as higherOrder } from '../operators/debounceTime';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(dueTime, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","\nimport { Observable } from '../Observable';\nimport { defaultIfEmpty as higherOrder } from '../operators/defaultIfEmpty';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return higherOrder<T, R>(defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { delay as higherOrder } from '../operators/delay';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  return higherOrder<T>(delay, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(/** @deprecated internal use only */ public source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../Observable';\nimport { distinct as higherOrder } from '../operators/distinct';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return higherOrder(keySelector, flushes)(this);\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return higherOrder(compare, keySelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilKeyChanged as higherOrder } from '../operators/distinctUntilKeyChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return higherOrder<T, T>(key, compare)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { tap as higherOrder } from '../operators/tap';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return higherOrder(<any>nextOrObserver, error, complete)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { exhaust as higherOrder } from '../operators/exhaust';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { exhaustMap as higherOrder } from '../operators/exhaustMap';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { expand as higherOrder } from '../operators/expand';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return higherOrder(project, concurrent, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { elementAt as higherOrder } from '../operators/elementAt';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return higherOrder(index, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","\nimport { Observable } from '../Observable';\nimport { filter as higherOrderFilter } from '../operators/filter';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return higherOrderFilter(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { finalize } from '../operators/finalize';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return finalize(callback)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { find as higherOrder } from '../operators/find';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","import { Observable } from '../Observable';\nimport { findIndex as higherOrder } from '../operators/findIndex';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { first as higherOrder } from '../operators/first';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { groupBy as higherOrder, GroupedObservable } from '../operators/groupBy';\nexport { GroupedObservable };\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return higherOrder(keySelector, elementSelector as any, durationSelector, subjectSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Observable } from '../Observable';\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { isEmpty as higherOrder } from '../operators/isEmpty';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { audit as higherOrder } from '../operators/audit';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { auditTime as higherOrder } from '../operators/auditTime';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(duration, scheduler)(this) as Observable<T>;\n}","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { last as higherOrder } from '../operators/last';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { every as higherOrder } from '../operators/every';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return higherOrder(predicate, thisArg)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Observable } from '../Observable';\nimport { mapTo as higherOrder } from '../operators/mapTo';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { materialize as higherOrder } from '../operators/materialize';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return higherOrder()(this) as Observable<Notification<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable } from '../Observable';\nimport { max as higherOrderMax } from '../operators/max';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMax(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { merge as mergeStatic } from '../observable/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { merge as higherOrder } from '../operators/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return higherOrder(...observables)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): Observable<T> {\n  return higherOrder(concurrent)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  return higherOrderMergeMap(project, <any>resultSelector, concurrent)(this) as Observable<I | R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMapTo as higherOrder } from '../operators/mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(innerObservable, resultSelector as any, concurrent)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { mergeScan as higherOrder } from '../operators/mergeScan';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(accumulator, seed, concurrent)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Observable } from '../Observable';\nimport { min as higherOrderMin } from '../operators/min';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMin(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  /** @deprecated internal use only */ public _subject: Subject<T>;\n  /** @deprecated internal use only */ public _refCount: number = 0;\n  /** @deprecated internal use only */ public _connection: Subscription;\n  _isComplete = false;\n\n  constructor(/** @deprecated internal use only */ public source: Observable<T>,\n              /** @deprecated internal use only */ public subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  /** @deprecated internal use only */ public getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  /** @deprecated internal use only */ _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { multicast as higherOrder } from '../operators/multicast';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): Observable<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(<any>subjectOrSubjectFactory, selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { observeOn as higherOrder } from '../operators/observeOn';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { onErrorResumeNext as higherOrder } from '../operators/onErrorResumeNext';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...nextSources)(this);\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../Observable';\nimport { pairwise as higherOrder } from '../operators/pairwise';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return higherOrder()(this) as Observable<[T, T]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { partition as higherOrder } from '../operators/partition';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { pluck as higherOrder } from '../operators/pluck';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  return higherOrder(...properties)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publish as higherOrder } from '../operators/publish';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: (source: Observable<T>) => Observable<T>): Observable<T>;\nexport function publish<T, R>(this: Observable<T>, selector: (source: Observable<T>) => Observable<R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(selector)(this);\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishBehavior as higherOrder } from '../operators/publishBehavior';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler): ConnectableObservable<T>;\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): Observable<T>;\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): Observable<R> | ConnectableObservable<R> {\n\n  return higherOrder<T, R>(bufferSize, windowTime, selectorOrScheduler as any, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishLast as higherOrder } from '../operators/publishLast';\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  //TODO(benlesh): correct type-flow through here.\n  return higherOrder()(this) as ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","import { Observable } from '../Observable';\nimport { race as higherOrder } from '../operators/race';\n\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { reduce as higherOrderReduce } from '../operators/reduce';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return higherOrderReduce(accumulator, seed)(this);\n  }\n\n  return higherOrderReduce(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { repeat as higherOrder } from '../operators/repeat';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Observable } from '../Observable';\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { retry as higherOrder } from '../operators/retry';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              public source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Observable } from '../Observable';\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { sample as higherOrder } from '../operators/sample';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { sampleTime as higherOrder } from '../operators/sampleTime';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(period, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { scan as higherOrderScan } from '../operators/scan';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  if (arguments.length >= 2) {\n    return higherOrderScan(accumulator, seed)(this) as Observable<R>;\n  }\n  return higherOrderScan(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { sequenceEqual as higherOrder } from '../operators/sequenceEqual';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return higherOrder(compareTo, comparor)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler):\n  Observable<T> {\n  return higherOrder(bufferSize, windowTime, scheduler)(this) as Observable<T>;\n};","\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\n\nObservable.prototype.shareReplay = shareReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    shareReplay: typeof shareReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { single as higherOrder } from '../operators/single';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { skipLast as higherOrder } from '../operators/skipLast';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\n\nObservable.prototype.skipLast = skipLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipLast: typeof skipLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { startWith as higherOrder } from '../operators/startWith';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  return higherOrder(...array)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn as higherOrder } from '../operators/subscribeOn';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Observable } from '../Observable';\nimport { switchAll as higherOrder } from '../operators/switchAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<Observable<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { switchMap as higherOrderSwitchMap } from '../operators/switchMap';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return higherOrderSwitchMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { switchMapTo as higherOrder } from '../operators/switchMapTo';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { take as higherOrder } from '../operators/take';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { takeLast as higherOrderTakeLast } from '../operators/takeLast';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrderTakeLast(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeUntil as higherOrder } from '../operators/takeUntil';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeWhile as higherOrder } from '../operators/takeWhile';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { throttle as higherOrder, ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>,\n                            durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(durationSelector, config)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\nimport { throttleTime as higherOrder } from '../operators/throttleTime';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>,\n                                duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(duration, scheduler, config)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timeInterval as higherOrder, TimeInterval } from '../operators/timeInterval';\nexport {TimeInterval};\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return higherOrder(scheduler)(this) as Observable<TimeInterval<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { timeout as higherOrder } from '../operators/timeout';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(due, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable, ObservableInput } from '../Observable';\nimport { timeoutWith as higherOrder } from '../operators/timeoutWith';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  return higherOrder(due, withObservable, scheduler)(this as any);\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timestamp as higherOrder } from '../operators/timestamp';\nimport { Timestamp } from '../operators/timestamp';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return higherOrder(scheduler)(this) as Observable<Timestamp<T>>;\n}\n","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  if (index === 0) {\n    return [item];\n  }\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","\nimport { Observable } from '../Observable';\nimport { toArray as higherOrder } from '../operators/toArray';\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return higherOrder()(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { window as higherOrder } from '../operators/window';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return higherOrder(windowBoundaries)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowCount as higherOrder } from '../operators/windowCount';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return higherOrder(windowSize, startWindowEvery)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { windowTime as higherOrder } from '../operators/windowTime';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowToggle as higherOrder } from '../operators/windowToggle';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(openings, closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowWhen as higherOrder } from '../operators/windowWhen';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { withLatestFrom as higherOrder } from '../operators/withLatestFrom';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...args)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { zip as higherOrder } from '../operators/zip';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T>(this: Observable<T>, ...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","import { Observable } from '../Observable';\nimport { zipAll as higherOrder } from '../operators/zipAll';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","export { audit } from './operators/audit';\nexport { auditTime } from './operators/auditTime';\nexport { buffer } from './operators/buffer';\nexport { bufferCount } from './operators/bufferCount';\nexport { bufferTime } from './operators/bufferTime';\nexport { bufferToggle } from './operators/bufferToggle';\nexport { bufferWhen } from './operators/bufferWhen';\nexport { catchError } from './operators/catchError';\nexport { combineAll } from './operators/combineAll';\nexport { combineLatest } from './operators/combineLatest';\nexport { concat } from './operators/concat';\nexport { concatAll } from './operators/concatAll';\nexport { concatMap } from './operators/concatMap';\nexport { concatMapTo } from './operators/concatMapTo';\nexport { count } from './operators/count';\nexport { debounce } from './operators/debounce';\nexport { debounceTime } from './operators/debounceTime';\nexport { defaultIfEmpty } from './operators/defaultIfEmpty';\nexport { delay } from './operators/delay';\nexport { delayWhen } from './operators/delayWhen';\nexport { dematerialize } from './operators/dematerialize';\nexport { distinct } from './operators/distinct';\nexport { distinctUntilChanged } from './operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './operators/distinctUntilKeyChanged';\nexport { elementAt } from './operators/elementAt';\nexport { every } from './operators/every';\nexport { exhaust } from './operators/exhaust';\nexport { exhaustMap } from './operators/exhaustMap';\nexport { expand } from './operators/expand';\nexport { filter } from './operators/filter';\nexport { finalize } from './operators/finalize';\nexport { find } from './operators/find';\nexport { findIndex } from './operators/findIndex';\nexport { first } from './operators/first';\nexport { groupBy } from './operators/groupBy';\nexport { ignoreElements } from './operators/ignoreElements';\nexport { isEmpty } from './operators/isEmpty';\nexport { last } from './operators/last';\nexport { map } from './operators/map';\nexport { mapTo } from './operators/mapTo';\nexport { materialize } from './operators/materialize';\nexport { max } from './operators/max';\nexport { merge } from './operators/merge';\nexport { mergeAll } from './operators/mergeAll';\nexport { mergeMap } from './operators/mergeMap';\nexport { mergeMap as flatMap } from './operators/mergeMap';\nexport { mergeMapTo } from './operators/mergeMapTo';\nexport { mergeScan } from './operators/mergeScan';\nexport { min } from './operators/min';\nexport { multicast } from './operators/multicast';\nexport { observeOn } from './operators/observeOn';\nexport { onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { pairwise } from './operators/pairwise';\nexport { partition } from './operators/partition';\nexport { pluck } from './operators/pluck';\nexport { publish } from './operators/publish';\nexport { publishBehavior } from './operators/publishBehavior';\nexport { publishLast } from './operators/publishLast';\nexport { publishReplay } from './operators/publishReplay';\nexport { race } from './operators/race';\nexport { reduce } from './operators/reduce';\nexport { repeat } from './operators/repeat';\nexport { repeatWhen } from './operators/repeatWhen';\nexport { retry } from './operators/retry';\nexport { retryWhen } from './operators/retryWhen';\nexport { refCount } from './operators/refCount';\nexport { sample } from './operators/sample';\nexport { sampleTime } from './operators/sampleTime';\nexport { scan } from './operators/scan';\nexport { sequenceEqual } from './operators/sequenceEqual';\nexport { share } from './operators/share';\nexport { shareReplay } from './operators/shareReplay';\nexport { single } from './operators/single';\nexport { skip } from './operators/skip';\nexport { skipLast } from './operators/skipLast';\nexport { skipUntil } from './operators/skipUntil';\nexport { skipWhile } from './operators/skipWhile';\nexport { startWith } from './operators/startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nexport { switchAll } from './operators/switchAll';\nexport { switchMap } from './operators/switchMap';\nexport { switchMapTo } from './operators/switchMapTo';\nexport { take } from './operators/take';\nexport { takeLast } from './operators/takeLast';\nexport { takeUntil } from './operators/takeUntil';\nexport { takeWhile } from './operators/takeWhile';\nexport { tap } from './operators/tap';\nexport { throttle } from './operators/throttle';\nexport { throttleTime } from './operators/throttleTime';\nexport { timeInterval } from './operators/timeInterval';\nexport { timeout } from './operators/timeout';\nexport { timeoutWith } from './operators/timeoutWith';\nexport { timestamp } from './operators/timestamp';\nexport { toArray } from './operators/toArray';\nexport { window } from './operators/window';\nexport { windowCount } from './operators/windowCount';\nexport { windowTime } from './operators/windowTime';\nexport { windowToggle } from './operators/windowToggle';\nexport { windowWhen } from './operators/windowWhen';\nexport { withLatestFrom } from './operators/withLatestFrom';\nexport { zip } from './operators/zip';\nexport { zipAll } from './operators/zipAll';\n","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/shareReplay';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipLast';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operators/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\nexport { pipe } from './util/pipe';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { rxSubscriber } from './symbol/rxSubscriber';\nimport { iterator } from './symbol/iterator';\nimport { observable } from './symbol/observable';\n\nimport * as _operators from './operators';\n\nexport const operators = _operators;\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var _Provider=_interopRequireDefault(require(\"./Provider\")),_Rx=require(\"rxjs/Rx\");/**\n * A provider that uses the MessagePort postMessage API to pass messages between windows.\n *\n * @param {Object} [target=self] An MessagePort (WebWorker instances are inherently MessagePorts).\n * @class MessagePortMessage\n * @extends {Provider}\n */class MessagePortMessage extends _Provider.default{// eslint-disable-next-line no-undef\nconstructor(target=self){super(),this.target=target}/**\n   * An observable of messages being sent to this provider.\n   *\n   * @memberof MessagePortMessage\n   * @instance\n   * @returns {Observable}\n   */messages(){return _Rx.Observable.fromEvent(this.target,\"message\",!1).filter(event=>// We can't use event.source in WebWorker messages as it seems to be null\n// However, the fallback to check the target should always be true\n(event.source||event.target)===this.target).pluck(\"data\")}/**\n   * Send a payload to the underlying target of this provider.\n   *\n   * @param {Object} payload\n   * @memberof MessagePortMessage\n   * @instance\n   */send(payload){this.target.postMessage(payload)}}exports.default=MessagePortMessage;","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var _Provider=_interopRequireDefault(require(\"./Provider\")),_Rx=require(\"rxjs/Rx\");/**\n * A provider that uses the Window postMessage API to pass messages between windows.\n *\n * @param {Object} [target=window.parent] An window implementing the postMessage API.\n * @class WindowMessage\n * @extends {Provider}\n */class WindowMessage extends _Provider.default{constructor(target=window.parent){super(),this.target=target}/**\n   * An observable of messages being sent to this provider.\n   *\n   * @memberof WindowMessage\n   * @instance\n   * @returns {Observable}\n   */messages(){return _Rx.Observable.fromEvent(window,\"message\",!1).filter(event=>event.source===this.target).pluck(\"data\")}/**\n   * Send a payload to the underlying target of this provider.\n   *\n   * @param {Object} payload\n   * @memberof WindowMessage\n   * @instance\n   */send(payload){this.target.postMessage(payload,\"*\")}}exports.default=WindowMessage;","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _Provider=_interopRequireDefault(require(\"./Provider\"));Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;/**\n * A development message provider that communicates using an RxJS subject.\n *\n * Example:\n *\n * ```js\n * // Message bus used to pass messages between apps and the wrapper\n * const bus = new Subject()\n *\n * // Set up app\n * const app = new App(\n *   new Messenger(new DevMessage('app', 'wrapper', bus))\n * )\n *\n * // Run app\n * wrapper.runApp(\n *   new DevMessage('wrapper', 'app', bus),\n *   '0xbitconnect'\n * )\n * ```\n *\n * @param {string} id The ID of this specific entity (e.g. \"wrapper\")\n * @param {string} target The ID of the target entity to communicate with (e.g. \"app\")\n * @param {Subject} bus A shared RxJS subject used to communicate between different entities\n * @class DevMessage\n * @extends {Provider}\n */class DevMessage extends _Provider.default{constructor(id,target,bus){super(),this.id=id,this.target=target,this.bus=bus}messages(){return this.bus.filter(event=>event.target===this.id)}send(payload){this.bus.next(Object.assign(payload,{target:this.target}))}}exports.default=DevMessage;","\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=exports.providers=void 0;var _jsonrpc=_interopRequireDefault(require(\"./jsonrpc\")),_MessagePortMessage=_interopRequireDefault(require(\"./providers/MessagePortMessage\")),_WindowMessage=_interopRequireDefault(require(\"./providers/WindowMessage\")),_DevMessage=_interopRequireDefault(require(\"./providers/DevMessage\"));const providers={MessagePortMessage:_MessagePortMessage.default,WindowMessage:_WindowMessage.default,DevMessage:_DevMessage.default/**\n * The RPC messenger used for sending requests and responses between contexts.\n *\n * @param {Provider} [provider=MessagePortMessage] The underlying provider that passes messages\n * @class Messenger\n */};exports.providers=providers;class Messenger{constructor(provider=new _MessagePortMessage.default){this.provider=provider}/**\n   * Get the message bus of incoming messages\n   *\n   * @returns {Observable}\n   * @memberof Messenger\n   * @instance\n   */bus(){return this.provider.messages()}/**\n   * Get requests from the message bus.\n   *\n   * @returns {Observable}\n   * @memberof Messenger\n   * @instance\n   */requests(){return this.bus().filter(message=>!_jsonrpc.default.isValidResponse(message))}/**\n   * Get responses from the message bus.\n   *\n   * @returns {Observable}\n   * @memberof Messenger\n   * @instance\n   */responses(){return this.bus().filter(_jsonrpc.default.isValidResponse)}/**\n   * Send a response\n   *\n   * @param {string} id The ID of the request being responded to.\n   * @param {any} result The result of the request.\n   * @returns {string}\n   * @memberof Messenger\n   * @instance\n   */sendResponse(id,result){const payload=_jsonrpc.default.encodeResponse(id,result);return this.provider.send(payload),payload.id}/**\n   * Send a request\n   *\n   * @param {string} method The method name to call\n   * @param {Array<any>} [params=[]] The parameters to send with the call\n   * @returns {string} The ID of the payload that was sent\n   * @memberof Messenger\n   * @instance\n   */send(method,params=[]){const payload=_jsonrpc.default.encodeRequest(method,params);return this.provider.send(payload),payload.id}/**\n   * Helper method to send a request and listen for responses to that request\n   *\n   * @param {string} method The method name to call\n   * @param {Array<any>} [params=[]] The parameters to send with the call\n   * @returns {Observable} An observable of responses to the sent request\n   * @memberof Messenger\n   * @instance\n   */sendAndObserveResponses(method,params=[]){const id=this.send(method,params);return this.responses().filter(message=>message.id===id)}/**\n   * Helper method to send a request and listen for a single response to that request\n   *\n   * @param {string} method The method name to call\n   * @param {Array<any>} [params] The parameters to send with the call\n   * @returns {Observable} An observable that resolves to the response\n   * @memberof Messenger\n   * @instance\n   */sendAndObserveResponse(method,params=[]){return this.sendAndObserveResponses(method,params).first()}}exports.default=Messenger;","import Messenger, { providers } from '@aragon/messenger'\nimport { defer } from 'rxjs/observable/defer'\nimport { empty } from 'rxjs/observable/empty'\nimport { fromPromise } from 'rxjs/observable/fromPromise'\nimport { merge } from 'rxjs/observable/merge'\n\nexport const AppProxyHandler = {\n  get (target, name, receiver) {\n    if (name in target) {\n      return target[name]\n    }\n\n    return function (...params) {\n      return target.rpc.sendAndObserveResponse(\n        'intent',\n        [name, ...params]\n      ).pluck('result')\n    }\n  }\n}\n\n/**\n * A JavaScript proxy that wraps RPC calls to the wrapper.\n */\nexport class AppProxy {\n  constructor (provider) {\n    this.rpc = new Messenger(provider)\n  }\n\n  /**\n   * Get an array of the accounts the user currently controls over time.\n   *\n   * @return {Observable}\n   */\n  accounts () {\n    return this.rpc.sendAndObserveResponses(\n      'accounts'\n    ).pluck('result')\n  }\n\n  /**\n   * Get the network the app is connected to over time.\n   *\n   * @return {Observable}\n   */\n  network () {\n    return this.rpc.sendAndObserveResponses(\n      'network'\n    ).pluck('result')\n  }\n\n  /**\n   * Set the app identifier.\n   *\n   * An app identifier is a way to distinguish multiple instances\n   * of the same app.\n   *\n   * Examples include: the name of a token that the app manages,\n   * the type of content that a TCR is curating, the name of a group etc.\n   *\n   * @param  {string} identifier\n   * @return {void}\n   */\n  identify (identifier) {\n    this.rpc.send(\n      'identify',\n      [identifier]\n    )\n  }\n\n  /**\n   * Get events from the application contract.\n   *\n   * @memberof AppProxy\n   * @return {Observable} An observable of contract events (as defined in Web3)\n   */\n  events () {\n    return defer(\n      () => this.rpc.sendAndObserveResponses(\n        'events'\n      ).pluck('result')\n    )\n  }\n\n  /**\n   * Create a handle to an external contract.\n   *\n   * @param  {string} address The address of the external contract\n   * @param  {Array<Object>} jsonInterface The JSON interface of the external contract\n   * @return {Object}\n   */\n  external (address, jsonInterface) {\n    const contract = {\n      events: (fromBlock = 0) => {\n        return defer(\n          () => this.rpc.sendAndObserveResponses(\n            'external_events',\n            [\n              address,\n              jsonInterface.filter(\n                (item) => item.type === 'event'\n              ),\n              fromBlock\n            ]\n          ).pluck('result')\n        )\n      }\n    }\n\n    // Bind calls\n    const callMethods = jsonInterface.filter(\n      (item) => item.type === 'function' && item.constant\n    )\n    callMethods.forEach((methodJsonInterface) => {\n      contract[methodJsonInterface.name] = (...params) => {\n        return this.rpc.sendAndObserveResponse(\n          'external_call',\n          [address, methodJsonInterface, ...params]\n        ).pluck('result')\n      }\n    })\n\n    return contract\n  }\n\n  /**\n   * Cache a value for the application.\n   *\n   * @memberof AppProxy\n   * @param  {string} key   The cache key\n   * @param  {string} value The value to cache\n   * @return {string}       Will pass through `value`\n   */\n  cache (key, value) {\n    this.rpc.send(\n      'cache',\n      ['set', key, value]\n    )\n\n    return value\n  }\n\n  /**\n   * Observe the application state.\n   *\n   * @memberof AppProxy\n   * @return {Observable} An observable of application states over time.\n   */\n  state () {\n    return this.rpc.sendAndObserveResponses(\n      'cache',\n      ['get', 'state']\n    ).pluck('result')\n  }\n\n  /**\n   * Listens for events, passes them through `reducer`, caches the resulting state\n   * and returns that state.\n   *\n   * The reducer takes the signature `(state, event)` a lá Redux.\n   *\n   * Optionally takes an array of other web3 event observables to merge with this app's events\n   *\n   * @memberof AppProxy\n   * @param  {reducer}      reducer\n   * @param  {Observable[]} [events]\n   * @return {Observable}   An observable of the resulting state from reducing events\n   */\n  store (reducer, events = [empty()]) {\n    const initialState = this.state().first()\n\n    // Wrap the reducer in another reducer that\n    // allows us to execute code asynchronously\n    // in our reducer. That's a lot of reducing.\n    //\n    // This is needed for the `mergeScan` operator.\n    // Also, this supports both sync and async code\n    // (because of the `Promise.resolve`).\n    const wrappedReducer = (state, event) =>\n      fromPromise(\n        Promise.resolve(reducer(state, event))\n      )\n\n    const store$ = initialState\n      .switchMap((initialState) =>\n        merge(\n          this.events(),\n          ...events\n        )\n          .mergeScan(wrappedReducer, initialState, 1)\n          .map((state) => this.cache('state', state))\n      )\n      .publishReplay(1)\n    store$.connect()\n\n    return store$\n  }\n\n  /**\n   * Perform a call to the application contract.\n   *\n   * @memberof AppProxy\n   * @param  {string} method The method to call\n   * @param  {...*} params Parameters for the call\n   * @return {Observable} An observable that emits the return value(s) of the call.\n   */\n  call (method, ...params) {\n    return this.rpc.sendAndObserveResponse(\n      'call',\n      [method, ...params]\n    ).pluck('result')\n  }\n\n  /**\n   * Send a notification.\n   *\n   * @memberof AppProxy\n   * @param {string} title The notification title\n   * @param {string} body The notification body\n   * @param {object} [context={}] The application context to send back if the notification is clicked\n   * @param {Date} [date=new Date()] The notification timestamp\n   * @return {void}\n   */\n  notify (title, body, context = {}, date = new Date()) {\n    return this.rpc.send(\n      'notification',\n      [title, body, context, date]\n    )\n  }\n\n  /**\n   * Listen for app contexts sent from the wrapper.\n   *\n   * An app context is sent from the wrapper and correspond to a specific view\n   * in your app.\n   *\n   * For example, when sending a notification, you can optionally supply an\n   * app context. If the notification is clicked, the app is loaded and\n   * the context is sent back to the app.\n   *\n   * @return {Observable} An observable of incoming app contexts\n   */\n  context () {\n    return this.rpc.requests()\n      .filter((request) => request.method === 'context')\n      .map((request) => request.params[0])\n  }\n\n  /**\n   * Describes the transaction path that an EVM callscript encodes.\n   *\n   * @param  {string} script\n   * @return {Observable} An observable that emits the transaction path the script encodes\n   */\n  describeScript (script) {\n    return this.rpc.sendAndObserveResponse(\n      'describe_script',\n      [script]\n    ).pluck('result')\n  }\n\n  /**\n   * Invoke a whitelisted web3.eth function.\n   *\n   * @param  {string} method The method to call. Must be in the whitelisted group (mostly getters).\n   * @param  {...*} params Parameters for the call\n   * @return {Observable} An observable that emits the return value(s) of the call.\n   */\n  web3Eth (method, ...params) {\n    return this.rpc.sendAndObserveResponse(\n      'web3_eth',\n      [method, ...params]\n    ).pluck('result')\n  }\n}\n\n/**\n * An Aragon app.\n *\n * This class handles communicating with the wrapper using Aragon RPC.\n *\n * The class itself contains \"magic methods\", that is, undefined methods\n * will instead become an intent that is sent to the wrapper.\n *\n * For example:\n *\n * ```js\n * app.transfer('foo', 'bar')\n * ```\n *\n * will result in an intent to send a transaction to the application proxy,\n * invoking the contract function `transfer` with the parameters `foo` and `bar`.\n *\n * @param {Object} [provider=MessagePortMessage] An RPC provider (will default to using the MessagePort API)\n */\nexport default class AragonApp {\n  constructor (provider = new providers.MessagePortMessage()) {\n    return new Proxy(\n      new AppProxy(provider),\n      AppProxyHandler\n    )\n  }\n}\n\n// Re-export the Aragon RPC providers\nexport { providers }\n","import Aragon from '@aragon/client'\n\nconst app = new Aragon()\n\nconst initialState = {\n  dummyValue: 0\n}\napp.store((state, event) => {\n  if (state === null) state = initialState\n\n  switch (event.event) {\n    case 'DummyEvent':\n      return { dummyValue: 1 }\n    default:\n      return state\n  }\n})\n"]}